# Uncomment this line to define a global platform for your project
platform :ios, '14.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    # Universal build settings for all targets
    target.build_configurations.each do |config|
      # Set minimum iOS deployment target (Firebase requires iOS 13.0+)
      if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'].to_f < 13.0
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      end
      
      # Universal compatibility settings
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'i386'
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
      config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
      config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'c11'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      
      # Universal typeof fix for all pods
      config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
      config.build_settings['OTHER_CFLAGS'] << '-Dtypeof=__typeof__'
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
        '$(inherited)',
        'typeof=__typeof__',
      ]
      
      # Suppress warnings that cause build failures
      config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
      config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO'
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
      
      # Additional gRPC fixes - Add comprehensive header search paths
      config.build_settings['HEADER_SEARCH_PATHS'] ||= ['$(inherited)']
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_TARGET_SRCROOT)'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_TARGET_SRCROOT)/src'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_TARGET_SRCROOT)/src/core'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_TARGET_SRCROOT)/src/core/lib'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_TARGET_SRCROOT)/src/core/lib/transport'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_ROOT)/gRPC-Core/src'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_ROOT)/gRPC-Core/src/core'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_ROOT)/gRPC-Core/src/core/lib'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_ROOT)/gRPC-Core/src/core/lib/transport'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_ROOT)/gRPC-C++/src'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_ROOT)/gRPC-C++/src/core'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_ROOT)/gRPC-C++/src/core/lib'
      config.build_settings['HEADER_SEARCH_PATHS'] << '$(PODS_ROOT)/gRPC-C++/src/core/lib/transport'
    end
    
    # Specific fixes for gRPC and related libraries
    if target.name.match(/gRPC|BoringSSL|abseil/)
      target.build_configurations.each do |config|
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] ||= ['$(inherited)']
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] += [
          '-Wno-template-id-cdtor',
          '-Wno-c++11-extensions', 
          '-Wno-nullability-completeness',
          '-Wno-expansion-to-defined',
          '-Wno-missing-template-keyword',
          '-Wno-error',
          '-fpermissive',
          '-Wno-unused-variable',
          '-Wno-unused-function',
          '-Wno-missing-declarations',
          '-Wno-deprecated-declarations'
        ]
        
        # Disable specific warnings for gRPC
        config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
        config.build_settings['OTHER_CFLAGS'] += [
          '-Wno-error',
          '-Wno-missing-declarations',
          '-Wno-deprecated-declarations',
          '-Wno-unused-variable',
          '-Wno-unused-function'
        ]
        
        # Force include missing headers
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'GRPC_CUSTOM_INTERCEPTION_CHAIN=1'
      end
    end
  end
  
  # Create missing header files after pod installation
  puts "ðŸ”§ Fixing gRPC header file issues..."
  
  grpc_core_path = File.join(installer.sandbox.root, 'gRPC-Core')
  grpc_cpp_path = File.join(installer.sandbox.root, 'gRPC-C++')
  
  # Function to create missing interception_chain.h
  def create_interception_chain_header(target_path)
    interception_chain_content = <<~HEADER
#ifndef GRPC_CORE_LIB_TRANSPORT_INTERCEPTION_CHAIN_H
#define GRPC_CORE_LIB_TRANSPORT_INTERCEPTION_CHAIN_H

#include <grpc/grpc.h>

#ifdef __cplusplus
extern "C" {
#endif

// Forward declarations
typedef struct grpc_call grpc_call;
typedef struct grpc_channel grpc_channel;
typedef struct grpc_completion_queue grpc_completion_queue;

// Minimal interception chain definitions to prevent build errors
typedef struct grpc_call_stack grpc_call_stack;
typedef struct grpc_call_element grpc_call_element;
typedef struct grpc_channel_stack grpc_channel_stack;
typedef struct grpc_channel_element grpc_channel_element;

// Filter definitions
typedef struct grpc_call_element_args grpc_call_element_args;
typedef struct grpc_channel_element_args grpc_channel_element_args;

#ifdef __cplusplus
}
#endif

#endif /* GRPC_CORE_LIB_TRANSPORT_INTERCEPTION_CHAIN_H */
    HEADER
    
    File.write(target_path, interception_chain_content)
    puts "âœ… Created missing header: #{target_path}"
  end
  
  # Fix gRPC-Core headers
  if Dir.exist?(grpc_core_path)
    transport_dir = File.join(grpc_core_path, 'src', 'core', 'lib', 'transport')
    FileUtils.mkdir_p(transport_dir) unless Dir.exist?(transport_dir)
    
    interception_chain_h = File.join(transport_dir, 'interception_chain.h')
    unless File.exist?(interception_chain_h)
      create_interception_chain_header(interception_chain_h)
    end
  end
  
  # Fix gRPC-C++ headers
  if Dir.exist?(grpc_cpp_path)
    cpp_transport_dir = File.join(grpc_cpp_path, 'src', 'core', 'lib', 'transport')
    FileUtils.mkdir_p(cpp_transport_dir) unless Dir.exist?(cpp_transport_dir)
    
    cpp_interception_chain_h = File.join(cpp_transport_dir, 'interception_chain.h')
    unless File.exist?(cpp_interception_chain_h)
      create_interception_chain_header(cpp_interception_chain_h)
    end
  end
  
  puts "âœ… gRPC header fixes applied successfully!"
end
