# Uncomment this line to define a global platform for your project
platform :ios, '14.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    # Universal build settings for all targets
    target.build_configurations.each do |config|
      # Set minimum iOS deployment target
      if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'].to_f < 12.0
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      end
      
      # Universal compatibility settings
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'i386'
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
      config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
      config.build_settings['GCC_C_LANGUAGE_STANDARD'] = 'c11'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      
      # Universal typeof fix for all pods
      config.build_settings['OTHER_CFLAGS'] ||= ['$(inherited)']
      config.build_settings['OTHER_CFLAGS'] << '-Dtypeof=__typeof__'
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
        '$(inherited)',
        'typeof=__typeof__',
      ]
      
      # Suppress warnings that cause build failures
      config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
      config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO'
      config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
      config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
    end
    
    # Specific fixes for gRPC and related libraries
    if target.name.match(/gRPC|BoringSSL|abseil/)
      target.build_configurations.each do |config|
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] ||= ['$(inherited)']
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] += [
          '-Wno-template-id-cdtor',
          '-Wno-c++11-extensions', 
          '-Wno-nullability-completeness',
          '-Wno-expansion-to-defined',
          '-Wno-missing-template-keyword',
          '-Wno-error',
          '-fpermissive'
        ]
      end
    end
  end
  
  # Fix for missing gRPC-Core modulemap file (common issue with gRPC-Core 1.69.0)
  grpc_modulemap_path = File.join(installer.sandbox.root, 'gRPC-Core', 'include', 'grpc', 'module.modulemap')
  unless File.exist?(grpc_modulemap_path)
    puts "Creating missing gRPC-Core module.modulemap file..."
    FileUtils.mkdir_p(File.dirname(grpc_modulemap_path))
    File.write(grpc_modulemap_path, <<~MODULEMAP
      framework module gRPC_Core {
        umbrella header "grpc.h"
        export *
        module * { export * }
      }
    MODULEMAP
    )
  end
end
